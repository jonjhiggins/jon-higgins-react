{
  "animated-rotating-cursor-over-carousel": {
    "layout": "post",
    "title": "Animated rotating cursor over carousel",
    "description": "Apply CSS3 transforms, transitions and animations to cursors.",
    "date": "2015-03-20T00:00:00.000Z",
    "category": "words",
    "tags": [
      "development",
      "css",
      "javascript"
    ],
    "preview": "Apply CSS3 transforms, transitions and animations to cursors.\n\n### …",
    "content": "\n\nApply CSS3 transforms, transitions and animations to cursors.\n\n### Why\n\nIn order to slide forwards or backwards in carousels, a common design pattern is to use arrow buttons either side of the carousel, overlaying the carousel content.\n\n<p class=\"p--pullquote\" data-pullquote=\"Making the clickable area larger and reducing the distance the user needs to travel keeps in mind Fitt's Law\"> However, these buttons can encroach on content and add clutter. To avoid these issues we could:</p>\n\n* **Make whole carousel clickable** - clicking on left portion will page user back one slide, clicking the right portion will page user forward one slide. Making the clickable area larger and reducing the distance the user needs to travel keeps in mind [Fitt's Law](http://en.wikipedia.org/wiki/Fitts%27s_law).\n* **Switch the users cursor over to an arrow** the arrow will indicate the direction the carousel will slide in when the user clicks. This takes up less room than two permanent arrows.\n\n\n\nNote that this effect will only be seen on desktop - there's no cursor on touch devices. As space is usually limited on touch devices we could look at adding arrow buttons in below the content.\n\n\n\n### How\nNow that we have a UX justification for this design pattern we need to look at a clean and reliable frontend implementation.\n\n### 1. Setup parent layout: add a carousel, with mousemove and click events.\n\nMousemove checks if the cursor is in the left or right portion of the carousel, and adds a \"left\" or \"right\" class accordingly. Click event checks if the target is a link (either within the content or carousel pagination), if not it will page to next or previous slide, depending on whether the cursor is in the left or right portion of the carousel.\n\n<p data-height=\"432\" data-theme-id=\"0\" data-slug-hash=\"pvxYYa\" data-default-tab=\"result\" data-user=\"jonjhiggins\" class='codepen'>See the Pen <a href='http://codepen.io/jonjhiggins/pen/pvxYYa/'>pvxYYa</a> by Jon Higgins (<a href='http://codepen.io/jonjhiggins'>@jonjhiggins</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n\n\n### 2. Replace cursor with div, apply transforms\n\nTo enhance carousel interactions, we can transition the cursor when switching from left to right. CSS transforms can't be applied to cursors, so we will have to replace our cursor with a `<div>` that can be styled as a cursor. In the next Codepen we set up mousemove event listeners that move the `.cursor` `<div>` in place of the browser's cursor and add a rotation transition. It's important to note we are using CSS transforms to move the cursor (rather than \"left\" / \"top\" properties) for performance as these don't [trigger a repaint/composite](http://csstriggers.com/).\n\n<p data-height=\"461\" data-theme-id=\"0\" data-slug-hash=\"KwJYZq\" data-default-tab=\"result\" data-user=\"jonjhiggins\" class='codepen'>See the Pen <a href='http://codepen.io/jonjhiggins/pen/KwJYZq/'>KwJYZq</a> by Jon Higgins (<a href='http://codepen.io/jonjhiggins'>@jonjhiggins</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n\n### 3. Make sure buttons still show pointer\n\nThe only issue with the above example is that the pointer button does not show when we hover over the CTA button or the carousel navigation. To get around this we can add mouseenter/mouseleave events to elements we want to show the pointer when hovering (e.g. `<a>`, `<button>`). We also need to add `pointer-events: none` to `.cursor`'s CSS. This prevents the `.cursor` element getting in the way of browser's cursor when hovering `<a>` tags and `<buttons>`.\n\n<p data-height=\"436\" data-theme-id=\"0\" data-slug-hash=\"LEqKKr\" data-default-tab=\"result\" data-user=\"jonjhiggins\" class='codepen'>See the Pen <a href='http://codepen.io/jonjhiggins/pen/LEqKKr/'>LEqKKr</a> by Jon Higgins (<a href='http://codepen.io/jonjhiggins'>@jonjhiggins</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n\n### Bonus! Try different transitions and animations\n\nInteractions contribute to the character of a website. Think carefully about which is the best fit for your project.\n\n<p data-height=\"131\" data-theme-id=\"0\" data-slug-hash=\"ByMXWo\" data-default-tab=\"result\" data-user=\"jonjhiggins\" class='codepen'>See the Pen <a href='http://codepen.io/jonjhiggins/pen/ByMXWo/'>ByMXWo</a> by Jon Higgins (<a href='http://codepen.io/jonjhiggins'>@jonjhiggins</a>) on <a href='http://codepen.io'>CodePen</a>.</p>\n<script async src=\"//assets.codepen.io/assets/embed/ei.js\"></script>\n",
    "iso8601Date": "2015-03-20T11:00:00+11:00",
    "basename": "animated-rotating-cursor-over-carousel"
  },
  "animated-scaled-letters": {
    "layout": "post",
    "title": "Animated letters: DOM vs Canvas performance",
    "description": "Optimising the performance of a GreenSock-based continuous scaling animation using Paper.js and canvas.",
    "date": "2016-05-11T00:00:00.000Z",
    "category": "words",
    "tags": [
      "development",
      "css",
      "javascript",
      "greensock"
    ],
    "preview": "The goal is to create a continuous animation of letters \"A\" to \"B\" …",
    "content": "\n\nThe goal is to create a continuous animation of letters \"A\" to \"B\" using a web browser. It should look something like this:\n\n![A to B animation!](a-to-b.gif)\n\n### Version 1: HTML / CSS and GreenSock\n\nStart with the simplest option: a GreenSock timeline to control HTML elements. Each letter is scaled from 0 to a \"mid\" size, then scaled up to a \"big\" size that either causes the letter to be clipped outside the canvas (A) or covers the canvas background (B).\n\n[View on Codepen](http://codepen.io/jonjhiggins/full/EKMEvd/)\n\n<p class=\"p--pullquote\" data-pullquote=\"in Chrome there are jagged edges as the letter is scaled up\">For the most part this seems to work fine, however in Chrome desktop and Android there are jagged edges as the letter is scaled up.</p>\n\nSome might argue this isn't that noticeable on fast transitions, but it bothered me. I tried forcing hardware acceleration (via GreenSock's `force3D` option and specifying scales individually), `-webkit-filter:blur(0)` switching the elements out for SVGs but the issue persisted.\n\n### Version 2: Scaling up HTML elements\n\n[Stackoverflow](http://stackoverflow.com/a/8038694/1980357) provided the following suggestion:\n\n> Webkit treats 3d transformed elements as textures instead of vectors in order to provide hardware 3d acceleration. The only solution to this would be to increase the size of the text and downscaling the element, in essence creating a higher res texture.\n\nSo I forked the first Codepen and tried this out. It did indeed fix the jagged edges, but the performance was terrible:\n\n[View on Codepen](http://codepen.io/jonjhiggins/full/PNLRmZ/)\n\n### Version 3: Canvas\n\nAs I've previously had success with better performance with `<canvas>` element this was my next port of call. Using vanilla canvas was very time consuming and awkward to get to work on retina screens. I soon abandoned this as it was clear a JS library was needed to work with the canvas for this purpose.\n\n### Version 4: Paper.js, canvas and GreenSock\n\nThere are a few canvas JS libraries out there and I'd not previously used any of them, but I really liked the look of [Paper.js](http://paperjs.org) - it had all the features I needed, was well documented and I was excited by the possibilities it provided.\n\n#### Retina-ready\nFirst of, Paper.js deals with the retina-screen issue out of the box. Just make sure you use `paper.view.size` to get the canvas's width and height.\n\n#### Using Paper.js outside of text/paperscript script blocks\nPaper.js is designed to be used in `<script type=\"text/paperscript\">` blocks, but I like to work with CommonJS modules so I needed to go down the \"use javascript directly\" route. Essentially this involved adding the following to the JS:\n\n    paper.install(window);\n    paper.setup('canvas');\n\n`paper.install(window)` adds the `paper` object to the global namespace and `paper.setup('canvas')` creates an empty project and view, where `canvas` is the ID of your canvas element.\n\nYou also have to manually tell Paper.js to render the view via either `paper.view.draw()` (single draw) or `view.onFrame` (animation loop). Failing to do so means nothing will be drawn, as I found out!\n\nAs well as the documentation I found Paper.js Codepens useful for this, e.g. [PaperJS Diamond hover by LegoMushroom](http://codepen.io/sol0mka/pen/yvaJw).\n\n\n#### Layout\nLaying out the text was simple once I got used to Paper.js. Where it comes in to it's own is modifying existing elements (position, scale, colour etc), a painful process with the vanilla canvas but incredibly simple with Paper.js.\n\n#### Animation\nPaper.js offers animation via its `view.onFrame` method. However there's no timeline or timing controls, so we'll still need GreenSock to control the animation. GreenSock's flexibility really shines through here - it can animate JS objects as well as DOM elements. So for each tween's animation frame:\n\n1. GreenSock updates specific properties (e.g. `x`/`y`) on the Paper.js object we've called the tween on (e.g. `textA`)\n2. We tell Paper.js to re-draw the canvas\n3. Paper.js re-draws the canvas with the new properties from GreenSock\n\nTo get the Paper.js to re-draw on each frame I ran `paper.view.draw()` on the GreenSock timeline's `onUpdate` event, I'm not sure if this is the \"right\" way for the two to work together, but it worked for me.\n\nAs an example, here's a line from the GreenSock DOM animation:\n\n    // Scale \"A\" up and out of view\n    .to($a, duration, {scale: textScaleBig})\n\nthe same line converted to work with Paper.js object\n\n    // Scale \"A\" up and out of view\n    .to(textA.scaling, duration, {\n      x: textScaleBig,\n      y: textScaleBig\n    })\n\n<p class=\"p--pullquote\" data-pullquote=\"I noticed the object needed to be stored in a variable, or GreenSock doesn't increment from previous value\">When using GreenSock on JS objects I noticed the object needed to be stored in a variable, or GreenSock doesn't seem to increment from previous value, e.g:</p>\n\n    var textAScaling = textA.scaling;\n\n    tl.set(textAScaling, {\n      x: textScaleMid,\n      y: textScaleMid,\n    })\n\n#### The result\nNo jagged edges! The animation was smooth all the way through and had none of the occasional flickers / layout bugs the HTML version suffered from.\n\nThe performance didn't seem much different on my MacBook (the HTML version ran fine), however on a VM IE10 rendering improved on the canvas version from 50-58FPS up to a steady 66FPS, while my iPad 2 improved from 40-55FPS up to 55-59FPS. This suggests that for complex animations or lower powered devices a canvas solution would be best, though case-by-case testing would be needed.\n\n<iframe height='400' scrolling='no' src='//codepen.io/jonjhiggins/embed/ZWPgqg/?height=400&theme-id=0&default-tab=result&embed-version=2' frameborder='no' allowtransparency='true' allowfullscreen='true' style='width: 100%;'>See the Pen <a href='http://codepen.io/jonjhiggins/pen/ZWPgqg/'>A to B: Paper.js / Canvas</a> by Jon Higgins (<a href='http://codepen.io/jonjhiggins'>@jonjhiggins</a>) on <a href='http://codepen.io'>CodePen</a>.\n",
    "iso8601Date": "2016-05-11T10:00:00+10:00",
    "basename": "animated-scaled-letters"
  },
  "brand-paradox": {
    "layout": "post",
    "title": "Brand personality paradox",
    "description": "Organisations, markets, people and personalities are not one-dimensional... why should a brand strategy be worded in one-dimensional keywords?",
    "date": "2013-03-10T00:00:00.000Z",
    "category": "words",
    "tags": [
      "branding"
    ],
    "preview": "I came across [Tom Dorresteijn](http://studiodumbar.com)'s concept …",
    "content": "\n\nI came across [Tom Dorresteijn](http://studiodumbar.com)'s concept of using \"the power of paradox\" to bring brand personality to life when starting work on an internal rebranding project last year:\n\n> \"...organisations are not one-dimensional, markets are not one-dimensional, people and personalities are not one-dimensional. So: why should a brand strategy be worded in one-dimensional keywords? Why is it that three or four keywords should stand for the eternal truth about the brand?\" <a href=\"#creating_brand_personality\">[1]</a>\n\nThis made a lot of sense to me - I felt the brand personality section (using single keywords) of the project I was working on quite limited:\n\n* The list of keywords could have applied to a multitude of companies, with totally different brand personalities.\n* Single words have broad meanings and are too open to interpretation (brand personality could loose direction)\n\nDorresteijn's example showed how this could be avoided:\n\n> \"Right now I am involved in the strategic development of a European brand. One of the keywords of the brand strategy is 'innovative'. This word is meaningful and meaningless at the same time. After reading and talking about the project we defined the paradox 'innovative - mainstream' to replace the singleminded 'innovative'. And then you feel energy: a brand that should be innovative and mainstream. That is much more like real life, much more exiting, much more strength and power. And: much easier to conduct creative reviews in developing the brand and to organise internal governance once the brand is on the market. I can tell you from experience.\" <a href=\"\">[1]</a>\n\nAfter switching over to (sort of) paradoxical pairs (for the aforementioned project's brand personality), we noticed how useful this system was when the agency we were working with reformatted the words into a list of single words. They then became the \"meaningful and meaningless\" words Dorresteijn talked about - the brand personality now lacked clarity. The new list didn't seem authentic or unique - it read like business spiel. Somehow the tension between the two paradoxical words does create an energy that is missing from the list of single words.\n\n<p class=\"p--pullquote\" data-pullquote=\"I concur with Dorresteijn's view that using paradoxes make creative reviews much easier when developing brands\">Now further into the project, I can concur with Dorresteijn's view that using paradoxes make creative reviews much easier when developing the brand. When reviewing copy and visual work we often found ourselves returning the paradoxical pairs, checking the work represented the paradoxical pairs as a fused word (e.g. technical - helpful).  If an element of the work didn't fit the brand personality it would often be the case it was overbalanced in one direction, for example the work could be too \"technical\" and not \"helpful\" enough. </p>\n\n[1] <a href=\"http://web.archive.org/web/20120919194116/http://visual-branding.com/eight-outlines/creating-a-brand-personality/\" id=\"creating_brand_personality\">Creating a Brand Personality (from Internet Archive)</a>\n",
    "iso8601Date": "2013-03-10T11:00:00+11:00",
    "basename": "brand-paradox"
  },
  "formdata-ie10": {
    "layout": "post",
    "title": "FormData only works in IE10 if you append name/value pairs",
    "description": "Passing a form element to the FormData object in Internet Explorer 10.",
    "date": "2013-01-04T00:00:00.000Z",
    "category": "words",
    "tags": [
      "development",
      "javascript",
      "internet explorer",
      "formdata"
    ],
    "preview": "I've recently been working with the XHR …",
    "content": "\n\nI've recently been working with the XHR [FormData](https://developer.mozilla.org/en-US/docs/DOM/XMLHttpRequest/FormData) object to build an upload management tool. When testing in IE10 (which supports FormData) I ran into a bizarre error (\"SCRIPT5 'Access Denied\") on this line:\n\n``` javascript\nvar upload_form = new FormData(form);\n```\n\nA rather useful [Stack Overflow discussion](http://stackoverflow.com/questions/13123537/formdata-of-existing-form-fails-in-ie10-by-triggering-via-js) suggested appending the data. Indeed Microsoft's [MSDN article](http://msdn.microsoft.com/en-us/library/ie/hh772723%28v=vs.85%29.aspx) doesn't seem to mention the element ('form' in my example) argument for FormData that other modern browsers support.\n\n### Appending lots of things\n\nThe Stack Overflow method works well for appending multiple files from one file input, but I had the requirement of submitting quite a bit of form data (text inputs and checkboxes) with the files… all at the same time. For this I needed to automate the appending, for which I used MooTools' [Element.toQueryString()](http://mootools.net/docs/core/Element/Element#Element:toQueryString) and [String.parseQueryString()](http://mootools.net/docs/more/Types/String.QueryString#String:parseQueryString) methods:\n\n``` javascript\ntry {\n\t// other modern browsers\n\tvar upload_form = new FormData(form);\n} catch(e) {\n\t// IE10 MUST have all form items appended as individual form key / value pairs\n\tvar upload_form = new FormData();\n\tvar form_serialise = form.toQueryString().parseQueryString();\n\t\tObject.each(form_serialise, function(item, key) {\n\t\t\tupload_form.append(key, item);\n\t\t});\n}\n```\n",
    "iso8601Date": "2013-01-04T11:00:00+11:00",
    "basename": "formdata-ie10"
  },
  "going-serverless": {
    "layout": "post",
    "title": "Going Serverless: host node for free",
    "description": "A frugal way to host node apps on Amazon AWS",
    "date": "2017-06-28T00:00:00.000Z",
    "category": "words",
    "tags": [
      "development",
      "node.js",
      "javascript",
      "serverless"
    ],
    "preview": "While looking around for a frugal way to host a node app I came …",
    "content": "\n\nWhile looking around for a frugal way to host a node app I came across Serverless architecture. Here follows a *massive simplification* of Serverless architecture from the perspective of a front-end developer. Essentially Serverless involves splitting out:\n\n1. **Server-side JS into individual functions** (e.g. `get-user`), these are then run on a cloud service such as [AWS Lambda](https://aws.amazon.com/lambda/details/). When run on Lambda, these functions exist as stateless containers, and are called on demand by the front-end (e.g. via a GET endpoint of `/user/{id}`).\n2. **Front-end HTML, JS and CSS etc** to be uploaded to a static host, such as [AWS S3](https://aws.amazon.com/s3/)\n\nFor data storage a cloud solution such as [AWS DynamoDB](https://aws.amazon.com/dynamodb/) or [MongoDB Atlas](https://www.mongodb.com/cloud) can be used.\n\n### Benefits\n\n1. **It's cheap**. As your functions on Lambda are called on demand, you are only using AWS's computing power for a minute amount of time - compared to having an EC2 instance on all the time. Currently the Lambda free-tier is 1 million requests a month!\n2. Scaling an app is much cheaper as a result of benefit #1\n3. Suited for easily plugging-in BaaS (back-end as a service - e.g. [Firebase](https://firebase.google.com/)) options for reduced development time.\n\n### Drawbacks\n\n1. It's a bit of a pain to split out functions and deploy / test them separately on Lambda (see below for example)\n2. Reliant on 3rd-party services - security, API upgrade issues etc.\n\n### A simple Serverless app\nTo test it out, let's build a simple app that will store info about Australian states in a database and return current data from said database. Deploying Serverless apps is made infinity easier by the [Serverless](https://serverless.com) npm package, which we will be using. The source for this example can be found at [https://github.com/jonjhiggins/serverless-test](https://github.com/jonjhiggins/serverless-test).\n\n#### Setup AWS and connect to it\n1. Install [Serverless](https://serverless.com) `npm i serverless -g`\n2. Register and log-in to [AWS](https://aws.amazon.com)\n3. Create an IAM user called `serverless-admin` with `AdministratorAccess` permissions ([more info](https://serverless.com/framework/docs/providers/aws/guide/credentials/))\n4. Create an AWS profile on your machine to connect to your AWS instance `serverless config credentials --provider aws --key AKIAIOSFODNN7EXAMPLE --secret wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY` ([more info](https://serverless.com/framework/docs/providers/aws/guide/credentials/))\n\n#### Build the project\n\n1. `mkdir serverless-test && cd $_ `\n3. Create file `serverless.yml` - this contains all the configuration the Serverless npm package needs to deploy to AWS.\n4. Add the following content to `serverless.yml`:\n\n```yaml\nservice: serverless-test\n\nframeworkVersion: \">=1.1.0 <2.0.0\"\n\nprovider:\n  name: aws\n  runtime: nodejs4.3\n  environment:\n    DYNAMODB_TABLE: ${self:service}-${opt:stage, self:provider.stage}\n  iamRoleStatements:\n    - Effect: Allow\n      Action:\n        - dynamodb:Scan\n        - dynamodb:PutItem\n      Resource: \"arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE}\"\n\nfunctions:\n  create:\n    handler: states/create.create\n    events:\n      - http:\n          path: states\n          method: post\n          cors: true\n\n  list:\n    handler: states/list.list\n    events:\n      - http:\n          path: states\n          method: get\n          cors: true\n\nresources:\n  Resources:\n    ServerlessTestTable:\n      Type: 'AWS::DynamoDB::Table'\n      DeletionPolicy: Retain\n      Properties:\n        AttributeDefinitions:\n          -\n            AttributeName: id\n            AttributeType: S\n        KeySchema:\n          -\n            AttributeName: id\n            KeyType: HASH\n        ProvisionedThroughput:\n          ReadCapacityUnits: 1\n          WriteCapacityUnits: 1\n        TableName: ${self:provider.environment.DYNAMODB_TABLE}\n```\n\nThis configuration make look complicated, but there's not too much too it:\n\n- In `provider` we're hooking up to the DynamoDB table that  will be our database, `iamRoleStatements` allow specific actions on the table that we'll reference in our Lambda functions.\n- In `functions` we list out the Lambda functions, `handler` references their path in the project (e.g. 'states/create.js' has a function \"create\"). In `events` we create the HTTP endpoint (e.g. '/states').\n- In `resources` we create or reference DynamoDB table \"ServerlessTestTable\" which will store our data.\n\n5. Create `states/create.js` and `states/list.js`. These will contain the functions that create and list states respectively.\n6. Add the following content to `states/create.js`:\n\n```js\nconst AWS = require('aws-sdk'); // eslint-disable-line import/no-extraneous-dependencies\n\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\n\nmodule.exports.create = (event, context, callback) => {\n  const uuid = Math.floor(Math.random() * 100000000).toString();\n  const data = JSON.parse(event.body);\n  if (typeof data.state !== 'string' || typeof data.slogan !== 'string' || typeof data.capital !== 'string') {\n    console.error('Validation Failed');\n    callback(new Error('Couldn\\'t create a new Australian state.'));\n    return;\n  }\n\n  const params = {\n    TableName: process.env.DYNAMODB_TABLE,\n    Item: {\n      id: uuid,\n      state: data.state,\n      slogan: data.slogan,\n      capital: data.capital,\n    },\n  };\n\n  // write the state to the database\n  dynamoDb.put(params, (error) => {\n    // handle potential errors\n    if (error) {\n      console.error(error);\n      callback(new Error('Couldn\\'t create a new Australian state.'));\n      return;\n    }\n\n    // create a response\n    const response = {\n      statusCode: 200,\n      body: JSON.stringify(params.Item),\n    };\n    callback(null, response);\n  });\n};\n```\n\n6. Add the following content to `states/list.js`:\n\n```js\nconst AWS = require('aws-sdk'); // eslint-disable-line import/no-extraneous-dependencies\n\nconst dynamoDb = new AWS.DynamoDB.DocumentClient();\nconst params = {\n  TableName: process.env.DYNAMODB_TABLE,\n};\n\nmodule.exports.list = (event, context, callback) => {\n  // fetch all states from the database\n  dynamoDb.scan(params, (error, result) => {\n    // handle potential errors\n    if (error) {\n      console.error(error);\n      callback(new Error('Couldn\\'t fetch the Australian states.'));\n      return;\n    }\n\n    // create a response\n    const response = {\n      statusCode: 200,\n      body: JSON.stringify(result.Items),\n    };\n    callback(null, response);\n  });\n};\n```\n\n7. Deploy using `serverless deploy`, make a note of the endpoint URLs at the end\n8. Add a state with a cURL request (replacing XXXXXXX with the ID within the endpoint URLs from previous step): `curl -X POST https://XXXXXXX.execute-api.us-east-1.amazonaws.com/dev/states --data '{ \"state\": \"South Australia\", \"slogan\": \"The Wine State\", \"capital\": \"Adelaide\" }'`\n9. View the states in the database with a cURL request: `curl -X GET https://XXXXXXX.execute-api.us-east-1.amazonaws.com/dev/states`\n\n### Going further\n\nThat simple example was adapted an the example project on [Serverless examples](https://github.com/serverless/examples/tree/master/aws-node-rest-api-with-dynamodb), there's loads more examples in the parent repo. In particular, the offline examples are useful for running Serverless locally for debugging. There's no front-end for this example, but that could be created and hosted on S3.\n",
    "iso8601Date": "2017-06-28T10:00:00+10:00",
    "basename": "going-serverless"
  },
  "grunt-for-email-templates": {
    "layout": "post",
    "title": "Using Grunt to build email templates",
    "description": "Take the pain out of building email templates using Grunt Email Boilerplate.",
    "date": "2014-01-21T00:00:00.000Z",
    "category": "words",
    "tags": [
      "development",
      "email design",
      "javascript"
    ],
    "preview": "Take the pain out of building email templates using [Grunt Email …",
    "content": "\n\nTake the pain out of building email templates using [Grunt Email Boilerplate](https://github.com/dwightjack/grunt-email-boilerplate).\n\n### Why?\n\n#### 1. Simple email templates often require complex/messy HTML\n Markup for Email templates can get complex and messy, making debugging and adjusting templates painful. Often regions are shared between different templates (e.g. header and footer), or areas are repeated in the same email (e.g. a product item or news article layout).\n\n *Couldn't templating help reduce the complexity of layouts and support DRY (don't repeat yourself)?*\n\n#### 2. Simple email templates often require complex CSS\nEmail templates require a mixture of inline and embedded CSS. Using an method of inlining styles, such as [Premailer](https://github.com/premailer/premailer), is pretty much essential for keeping your HTML files clean. CSS pre-processors, such as SASS, can also help speed up development time. If we want to look at templating out sections of the email (suggested above) SASS helps us keep our CSS modular in separate files. Previously I would run `sass watch`, then run Premailer when the email was built / every time a template needing updating.\n\n*Couldn't this workflow be better automated?*\n\n#### 3. Testing email templates can be time consuming\nPreviously, I would build a template then upload it to an email platform from which I'd send out test emails to myself and [Litmus](https://litmus.com). I'd then make adjustments, upload, send tests... adjustments, upload, send tests, adjustments, upload send tests... you get the picture.\n\n*Couldn't we speed up this process?*\n\n#### 4. Manually updating email templates is often a dull, repetitive and painful task\nWhile some email templates are hooked up to CMS/ecommerce solutions that populate email templates, this level of integration isn't always feasible for some people. Updating a typical product/sales email template each month might involve updating the product name, product price, product URL and product image (resized, optimised and re-uploaded) for each product in the email - a dull, time-consuming task. Doing this task through a WYSIWYG editor commonly found in email platforms is prone to breaking layouts (editing wrong regions or incorrectly sized images).\n\n*Couldn't this task be automated? And couldn't we better protect the layout from mistakes?*\n\n### Grunt Email Boilerplate to the rescue!\n[Grunt Email Boilerplate](https://github.com/dwightjack/grunt-email-boilerplate) is a vanilla email template that takes advantage of task-runner [Grunt](http://gruntjs.com) and it's many plugins/tasks. Out of the box it:\n\n* Provides templating via EJS\n* Watches and builds your SASS\n* Runs your content through Premailer\n* Optimises images\n* Optionally, sends the email via Nodemailer\n\n...which solves most of our problems outlined above:\n\n1. We can use EJS templating to separate out header/footer elements and share between different email templates. We can also use EJS to iterate through JSON arrays of content, populating our HTML templates. For example, in a recent product email template I used [this JSON file](https://github.com/jonjhiggins/clubline-emails/blob/9891fa2e5163289a9edec5db87513dfe06b31df0/src/data/data.json) to populate the products section - only requiring me to write the HTML for one product.\n\n2. SASS/Compass and Premailer are run every time the content is changed, two less things to think about so you can concentrate on building your template.\n\n3. Nodemailer allows you to send yourself or others versions of the emails for testing. I didn't explore this option until after I'd built my most recent email template, so currently there's no images in the emails it sends on my setup. But I'm sure with a bit of digging that can be sorted. Support for Litmus [appears to be on its way](https://github.com/dwightjack/grunt-email-boilerplate/issues/8).\n\n4. Using EJS templating to iterate through arrays of data is really powerful. For me, the JSON file containing email content is easy to edit manually if elements of the email change. However, as the file is JSON you can see how this process could easily be hooked up to a UI for less technical users or integrated into a back-office system that spits out JSON.\n\n## In summary\n\nWhile template building and testing can be painful, Grunt Email Boilerplate does a great job of speeding up development right out of the box. It's also straightforward to customise to fit your requirements.\n\nThe next time you're building email templates I suggest you check out [Grunt Email Boilerplate](https://github.com/dwightjack/grunt-email-boilerplate). You can also [check out the source of a HTML template](https://github.com/jonjhiggins/clubline-emails) I built using Grunt Email Boilerplate - including customisations I've made to the workflow.\n",
    "iso8601Date": "2014-01-21T11:00:00+11:00",
    "basename": "grunt-for-email-templates"
  },
  "max-device-width": {
    "layout": "post",
    "title": "Modifying 'max-device-width' with Javascript",
    "description": "Changing CSS media queries on the client side.",
    "date": "2012-11-30T00:00:00.000Z",
    "category": "words",
    "tags": [
      "development",
      "javascript",
      "media queries",
      "responsive"
    ],
    "preview": "I recently had the requirement to swap out all occurrences of the …",
    "content": "\n\nI recently had the requirement to swap out all occurrences of the CSS media query ``max-device-width`` with ``max-width`` in Javascript. I wasn't able to find any resources on how to go about this, so this may be of use for anyone needing to modify media queries on the client side.\n\n### Why would you need to mess with 'max-device-width'?\n\nMy scenario was needing to give an indication of how HTML email content would display on mobile devices. Using IFrame-based tests (e.g. [Matt Kersley's Responsive Design Tests](http://mattkersley.com/responsive/)) worked well in most instances, but many responsive email designs use CSS media queries that included ``max-device-width``. As my IFrames were being viewed on desktop devices with high resolution displays these rules were not being triggered. As it isn't possible to fake ``max-device-width`` the only alternative was switch it for ``max-width``.\n\n### Getting hold of the media queries\n\nFirst we need to get hold of all the stylesheets that the document has loaded and loop through each of them. In turn, we need to loop through every CSS rule and check if any have their type property set to [4 (MEDIA_RULE)](https://developer.mozilla.org/en-US/docs/DOM/cssRule). This is shown in this function, which returns an array of all the media rules found:\n\n``` javascript\nfunction getCSSMediaRules(doc) {\n\tvar stylesheets = doc.styleSheets;\n\tvar mediaRules = new Array();\n\n\t// loop through all CSS files\n\tfor (var i in stylesheets) {\n\t\tif (stylesheets.hasOwnProperty(i)) {\n\t\t\tvar stylesheets = stylesheets[i];\n\t\t\tvar stylesheetRules = stylesheets.cssRules;\n\t\t\t// for every CSS file, loop through all CSS rules\n\t\t\tfor (var i in stylesheetRules) {\n\t\t\t\tif (stylesheetRules.hasOwnProperty(i)) {\n\t\t\t\t\tvar stylesheetRule = stylesheetRules[i];\n\t\t\t\t\t// check CSS rule is a type 4 'MEDIA_RULE'\n\t\t\t\t\tif (stylesheetRule.type == 4) {\n\t\t\t\t\t        mediaRules.push(stylesheetRule);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\treturn mediaRules;\n}\n```\n\n### Editing media queries\n\nThe DOM only provides methods to add and remove CSS media rules. In my instance I needed to preserve the width value, so removing and adding wasn't an option. Instead I found editing the rule's ``mediaText`` property had the desired effect:  \n\n``` javascript\t\t\nfunction replaceMaxDeviceWidth(rule) {\n\trule.media.mediaText = rule.media.mediaText.replace('max-device-width', 'max-width');\n}\n```\n\n### console.debug(everythingAllTheTime)\n\nMany of the properties such as ``mediaText`` have pretty sparse documentation so it's sometimes easier to debug the rules and mess with them in the console.\n",
    "iso8601Date": "2012-11-30T11:00:00+11:00",
    "basename": "max-device-width"
  }
}
